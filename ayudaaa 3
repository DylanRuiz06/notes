import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class VillanosApp {
    // --- Estos se vinculan autom√°ticamente desde el .form si les diste Field Name ---
    private JPanel mainPanel;
    private JTextField idTextField;
    private JTextField aliasTextField;
    private JComboBox<String> especialidadComboBox;
    private JComboBox<Integer> nivelComboBox;
    private JComboBox<String> ubicacionComboBox;
    private JButton agregarButton;
    private JButton buscarButton;
    private JTable tablaPrincipal;
    private JTextField idBusquedaTextField;
    private JComboBox<String> filtroEspecialidadComboBox; // Necesitar√°s otro combo para filtrar
    private JButton filtrarButton;
    private JTable tablaFiltrada;
    private JButton contarButton;
    private JTextArea conteoTextArea;

    // --- Tu l√≥gica ---
    private ListaDobleVillanos listaVillanos = new ListaDobleVillanos();

    // --- Constructor ---
    public VillanosApp() {
        // Aqu√≠ es donde conectaremos los botones
        inicializarComponentesGUI(); // M√©todo para poblar combos, etc.
        conectarBotones();
    }

    // --- M√©todo Main para lanzar la App ---
    public static void main(String[] args) {
        JFrame frame = new JFrame("Registro de Villanos");
        frame.setContentPane(new VillanosApp().mainPanel); // <- Clave: Usa el panel principal
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack(); // Ajusta el tama√±o
        frame.setLocationRelativeTo(null); // Centra
        frame.setVisible(true);
    }

    // --- M√©todo para configurar JTables y ComboBoxes ---
    private void inicializarComponentesGUI() {
        // Poblar ComboBoxes
        String[] especialidades = {"üí£ Explosivos", "üíª Hackeo", "üß† Manipulaci√≥n", "üé≠ Disfraz", "üß¨ Biotecnolog√≠a"};
        String[] ubicaciones = {"üè• Arkham", "üè¢ Belle Reve", "üõ∏ √Årea 51", "üè∞ Fortaleza Oscura", "üëª Zona Fantasma"};

        for (String s : especialidades) {
            especialidadComboBox.addItem(s);
            filtroEspecialidadComboBox.addItem(s); // Tambi√©n para el filtro
        }
        for (String u : ubicaciones) ubicacionComboBox.addItem(u);
        for (int i = 1; i <= 10; i++) nivelComboBox.addItem(i);

        // Configurar JTables
        String[] columnas = {"ID", "Alias", "Especialidad", "Peligrosidad", "Ubicaci√≥n"};
        tablaPrincipal.setModel(new DefaultTableModel(null, columnas));
        tablaFiltrada.setModel(new DefaultTableModel(null, columnas));

        // Hacer JTextArea no editable si es necesario
        conteoTextArea.setEditable(false);
    }

    // --- M√©todo para conectar los ActionListeners ---
    private void conectarBotones() {

        // 1. Bot√≥n Agregar
        agregarButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                agregarVillanoAction();
            }
        });

        // 2. Bot√≥n Buscar (Usando Lambda - m√°s corto)
        buscarButton.addActionListener(e -> buscarVillanoAction());

        // 3. Bot√≥n Filtrar
        filtrarButton.addActionListener(e -> filtrarOrdenarAction());

        // 4. Bot√≥n Contar
        contarButton.addActionListener(e -> contarVillanosAction());
    }

    // --- M√©todos de Acci√≥n (Llamados por los Listeners) ---

    private void agregarVillanoAction() {
        try {
            // Validar que el ID no est√© vac√≠o
            if (idTextField.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(mainPanel, "El ID no puede estar vac√≠o.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
             // Validar que el Alias no est√© vac√≠o
            if (aliasTextField.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(mainPanel, "El Alias no puede estar vac√≠o.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int id = Integer.parseInt(idTextField.getText().trim());
            String alias = aliasTextField.getText().trim();
            String esp = (String) especialidadComboBox.getSelectedItem();
            int nivel = (Integer) nivelComboBox.getSelectedItem();
            String ubi = (String) ubicacionComboBox.getSelectedItem();


            Villano v = new Villano(id, alias, esp, nivel, ubi);
            listaVillanos.insertarOrdenado(v);
            listaVillanos.mostrarEnTabla(tablaPrincipal); // Actualizar tabla
            JOptionPane.showMessageDialog(mainPanel, "Villano agregado exitosamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);

            // Limpiar campos
            idTextField.setText("");
            aliasTextField.setText("");

        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(mainPanel, "Error: El ID debe ser un n√∫mero.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(mainPanel, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void buscarVillanoAction() {
        try {
            if (idBusquedaTextField.getText().trim().isEmpty()) {
                 JOptionPane.showMessageDialog(mainPanel, "Ingrese un ID para buscar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                 return;
            }
            int idBusqueda = Integer.parseInt(idBusquedaTextField.getText().trim());
            Villano v = listaVillanos.busquedaBinaria(idBusqueda);

            if (v != null) {
                // Mostrar datos en los campos para editar (o en un di√°logo)
                idTextField.setText(String.valueOf(v.getId()));
                aliasTextField.setText(v.getAlias());
                especialidadComboBox.setSelectedItem(v.getEspecialidad());
                nivelComboBox.setSelectedItem(v.getNivelPeligrosidad());
                ubicacionComboBox.setSelectedItem(v.getUbicacion());
                JOptionPane.showMessageDialog(mainPanel, "Villano encontrado. Datos cargados para editar.", "Encontrado", JOptionPane.INFORMATION_MESSAGE);
                // NOTA: Si quieres editar, necesitar√°s un bot√≥n "Guardar Cambios"
                // y una forma de saber qu√© villano se est√° editando.
            } else {
                JOptionPane.showMessageDialog(mainPanel, "Villano con ID " + idBusqueda + " no encontrado.", "No Encontrado", JOptionPane.WARNING_MESSAGE);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(mainPanel, "Error: El ID de b√∫squeda debe ser un n√∫mero.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void filtrarOrdenarAction() {
        String espFiltro = (String) filtroEspecialidadComboBox.getSelectedItem();
        ArrayList<Villano> filtrados = listaVillanos.filtrarPorEspecialidad(espFiltro);
        listaVillanos.ordenarPorPeligrosidadSeleccion(filtrados);
        listaVillanos.mostrarListaEnTabla(tablaFiltrada, filtrados);
        if (filtrados.isEmpty()) {
            JOptionPane.showMessageDialog(mainPanel, "No se encontraron villanos con esa especialidad.", "Filtro", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void contarVillanosAction() {
        String[] ubicaciones = {"üè• Arkham", "üè¢ Belle Reve", "üõ∏ √Årea 51", "üè∞ Fortaleza Oscura", "üëª Zona Fantasma"};
        listaVillanos.contarPorUbicacion(ubicaciones, conteoTextArea);
    }
}
